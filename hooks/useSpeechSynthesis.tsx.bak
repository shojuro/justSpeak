'use client'

import { useState, useEffect, useCallback } from 'react'
import { useToast } from '@/components/ui/Toast'

interface UseSpeechSynthesisProps {
  provider?: 'browser' | 'openai' | 'elevenlabs'
  voice?: string
  rate?: number
  pitch?: number
  volume?: number
}

export function useSpeechSynthesis({
  provider = 'browser',
  voice = 'nova',
  rate = 1,
  pitch = 1,
  volume = 1
}: UseSpeechSynthesisProps = {}) {
  const [isSpeaking, setIsSpeaking] = useState(false)
  const [isPaused, setIsPaused] = useState(false)
  const [isSupported, setIsSupported] = useState(false)
  const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([])
  const [error, setError] = useState<string | null>(null)
  const { showToast } = useToast()

  useEffect(() => {
    if (typeof window !== 'undefined' && 'speechSynthesis' in window) {
      setIsSupported(true)
      
      const loadVoices = () => {
        const availableVoices = window.speechSynthesis.getVoices()
        setVoices(availableVoices)
      }

      loadVoices()
      window.speechSynthesis.onvoiceschanged = loadVoices
    }
  }, [])

  const speakWithBrowser = useCallback((text: string) => {
    if (!isSupported) {
      setError('Speech synthesis not supported in this browser')
      return
    }

    // Cancel any ongoing speech
    window.speechSynthesis.cancel()

    const utterance = new SpeechSynthesisUtterance(text)
    
    // Set voice if available
    if (voices.length > 0) {
      const selectedVoice = voices.find(v => v.lang.startsWith('en'))
      if (selectedVoice) {
        utterance.voice = selectedVoice
      }
    }

    utterance.rate = rate
    utterance.pitch = pitch
    utterance.volume = volume
    utterance.lang = 'en-US'

    utterance.onstart = () => {
      setIsSpeaking(true)
      setIsPaused(false)
      setError(null)
    }

    utterance.onend = () => {
      setIsSpeaking(false)
      setIsPaused(false)
    }

    utterance.onerror = (event) => {
      setIsSpeaking(false)
      setIsPaused(false)
      setError(`Speech synthesis error: ${event.error || 'Unknown error'}`)
    }

    window.speechSynthesis.speak(utterance)
  }, [isSupported, voices, rate, pitch, volume])

  const speakWithAPI = useCallback(async (text: string, useProvider: string) => {
    try {
      setIsSpeaking(true)
      setError(null)
      
      // Use different endpoint for ElevenLabs
      const endpoint = useProvider === 'elevenlabs' ? '/api/speech' : '/api/voice/synthesize'
      const body = useProvider === 'elevenlabs' 
        ? { text, voiceId: voice } 
        : { text, voice, speed: rate, provider: useProvider }
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to synthesize speech')
      }

      if (useProvider === 'browser') {
        // Handle browser-based synthesis
        const data = await response.json()
        speakWithBrowser(text)
        return
      }

      // For API providers, play the audio
      const audioBlob = await response.blob()
      const audioUrl = URL.createObjectURL(audioBlob)
      const audio = new Audio(audioUrl)
      
      audio.playbackRate = rate
      audio.volume = volume

      audio.onended = () => {
        setIsSpeaking(false)
        URL.revokeObjectURL(audioUrl)
      }

      audio.onerror = () => {
        setIsSpeaking(false)
        setError('Failed to play audio')
        URL.revokeObjectURL(audioUrl)
      }

      await audio.play()
    } catch (error) {
      setIsSpeaking(false)
      const errorMessage = error instanceof Error ? error.message : 'Failed to speak text'
      setError(errorMessage)
      
      // Fallback to browser synthesis
      if (useProvider !== 'browser') {
        showToast('Falling back to browser voice', 'info')
        speakWithBrowser(text)
      }
    }
  }, [voice, rate, volume, speakWithBrowser])

  const speak = useCallback((text: string) => {
    if (!text) return

    if (provider === 'browser') {
      speakWithBrowser(text)
    } else {
      speakWithAPI(text, provider)
    }
  }, [provider, speakWithBrowser, speakWithAPI])

  const pause = useCallback(() => {
    if (isSupported && isSpeaking && !isPaused) {
      window.speechSynthesis.pause()
      setIsPaused(true)
    }
  }, [isSupported, isSpeaking, isPaused])

  const resume = useCallback(() => {
    if (isSupported && isSpeaking && isPaused) {
      window.speechSynthesis.resume()
      setIsPaused(false)
    }
  }, [isSupported, isSpeaking, isPaused])

  const stop = useCallback(() => {
    if (isSupported) {
      window.speechSynthesis.cancel()
      setIsSpeaking(false)
      setIsPaused(false)
    }
  }, [isSupported])

  return {
    speak,
    pause,
    resume,
    stop,
    isSpeaking,
    isPaused,
    isSupported,
    voices,
    error,
  }
}